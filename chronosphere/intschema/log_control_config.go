// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type LogControlConfig struct {
	Rules []LogControlConfigRules `intschema:"rules,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *LogControlConfig) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.LogControlConfig, d, o)
}

func (o *LogControlConfig) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *LogControlConfig) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_log_control_config", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *LogControlConfig) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_log_control_config",
		ID:   o.HCLID,
	}.AsID()
}

type LogControlConfigRules struct {
	Name      string                          `intschema:"name,optional"`
	DropField *LogControlConfigRulesDropField `intschema:"drop_field,optional,list_encoded_object"`
	Filter    string                          `intschema:"filter,optional"`
	Mode      string                          `intschema:"mode,optional"`
	Sample    *LogControlConfigRulesSample    `intschema:"sample,optional,list_encoded_object"`
	Type      string                          `intschema:"type,optional"`
}

type LogControlConfigRulesSample struct {
	Rate float64 `intschema:"rate,optional"`
}

type LogControlConfigRulesDropField struct {
	FieldRegex string                                    `intschema:"field_regex,optional"`
	ParentPath *LogControlConfigRulesDropFieldParentPath `intschema:"parent_path,optional,list_encoded_object"`
}

type LogControlConfigRulesDropFieldParentPath struct {
	Selector string `intschema:"selector,optional"`
}
