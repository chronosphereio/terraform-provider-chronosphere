// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type WebhookAlertNotifier struct {
	Name                  string `intschema:"name"`
	Slug                  string `intschema:"slug,optional,computed"`
	Url                   string `intschema:"url"`
	BasicAuthPassword     string `intschema:"basic_auth_password,optional"`
	BasicAuthUsername     string `intschema:"basic_auth_username,optional"`
	BearerToken           string `intschema:"bearer_token,optional"`
	ProxyUrl              string `intschema:"proxy_url,optional"`
	SendResolved          bool   `intschema:"send_resolved,optional,default:true"`
	TlsInsecureSkipVerify bool   `intschema:"tls_insecure_skip_verify,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *WebhookAlertNotifier) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.WebhookAlertNotifier, d, o)
}

func (o *WebhookAlertNotifier) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *WebhookAlertNotifier) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_webhook_alert_notifier", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *WebhookAlertNotifier) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_webhook_alert_notifier",
		ID:   o.HCLID,
	}.AsID()
}
