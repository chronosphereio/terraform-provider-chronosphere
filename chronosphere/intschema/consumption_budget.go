// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type ConsumptionBudget struct {
	Name                 string                       `intschema:"name"`
	Slug                 string                       `intschema:"slug,optional,computed"`
	ConsumptionConfigId  tfid.ID                      `intschema:"consumption_config_id"`
	NotificationPolicyId tfid.ID                      `intschema:"notification_policy_id,optional"`
	DefaultPriority      int64                        `intschema:"default_priority,optional"`
	PartitionSlugPath    string                       `intschema:"partition_slug_path,optional"`
	Priority             []ConsumptionBudgetPriority  `intschema:"priority,optional"`
	Resource             string                       `intschema:"resource,optional"`
	Threshold            []ConsumptionBudgetThreshold `intschema:"threshold,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *ConsumptionBudget) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.ConsumptionBudget, d, o)
}

func (o *ConsumptionBudget) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *ConsumptionBudget) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_consumption_budget", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *ConsumptionBudget) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_consumption_budget",
		ID:   o.HCLID,
	}.AsID()
}

type ConsumptionBudgetThreshold struct {
	Action      string                                 `intschema:"action,optional"`
	InstantRate *ConsumptionBudgetThresholdInstantRate `intschema:"instant_rate,optional,list_encoded_object"`
	Type        string                                 `intschema:"type,optional"`
	Volume      *ConsumptionBudgetThresholdVolume      `intschema:"volume,optional,list_encoded_object"`
}

type ConsumptionBudgetThresholdVolume struct {
	FixedValue int64 `intschema:"fixed_value,optional"`
}

type ConsumptionBudgetThresholdInstantRate struct {
	FixedValuePerSec int64 `intschema:"fixed_value_per_sec,optional"`
}

type ConsumptionBudgetPriority struct {
	Filter   []ConsumptionBudgetPriorityFilter `intschema:"filter,optional"`
	Priority int64                             `intschema:"priority,optional"`
}

type ConsumptionBudgetPriorityFilter struct {
	DatasetId tfid.ID                                   `intschema:"dataset_id,optional"`
	LogFilter *ConsumptionBudgetPriorityFilterLogFilter `intschema:"log_filter,optional,list_encoded_object"`
}

type ConsumptionBudgetPriorityFilterLogFilter struct {
	Query string `intschema:"query"`
}
