// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type TraceJaegerRemoteSamplingStrategy struct {
	Name            string                                           `intschema:"name"`
	Slug            string                                           `intschema:"slug,optional,computed"`
	AppliedStrategy TraceJaegerRemoteSamplingStrategyAppliedStrategy `intschema:"applied_strategy,list_encoded_object"`
	ServiceName     string                                           `intschema:"service_name"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *TraceJaegerRemoteSamplingStrategy) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.TraceJaegerRemoteSamplingStrategy, d, o)
}

func (o *TraceJaegerRemoteSamplingStrategy) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *TraceJaegerRemoteSamplingStrategy) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_trace_jaeger_remote_sampling_strategy", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *TraceJaegerRemoteSamplingStrategy) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_trace_jaeger_remote_sampling_strategy",
		ID:   o.HCLID,
	}.AsID()
}

type TraceJaegerRemoteSamplingStrategyAppliedStrategy struct {
	PerOperationStrategies *TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategies `intschema:"per_operation_strategies,optional,list_encoded_object"`
	ProbabilisticStrategy  *TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategy  `intschema:"probabilistic_strategy,optional,list_encoded_object"`
	RateLimitingStrategy   *TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategy   `intschema:"rate_limiting_strategy,optional,list_encoded_object"`
}

type TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategy struct {
	MaxTracesPerSecond int64 `intschema:"max_traces_per_second"`
}

type TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategy struct {
	SamplingRate float64 `intschema:"sampling_rate"`
}

type TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategies struct {
	DefaultSamplingRate              float64                                                                                        `intschema:"default_sampling_rate"`
	DefaultLowerBoundTracesPerSecond float64                                                                                        `intschema:"default_lower_bound_traces_per_second,optional"`
	DefaultUpperBoundTracesPerSecond float64                                                                                        `intschema:"default_upper_bound_traces_per_second,optional"`
	PerOperationStrategies           []TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategies `intschema:"per_operation_strategies,optional"`
}

type TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategies struct {
	Operation             string                                                                                                            `intschema:"operation"`
	ProbabilisticStrategy TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategiesProbabilisticStrategy `intschema:"probabilistic_strategy,list_encoded_object"`
}

type TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategiesProbabilisticStrategy struct {
	SamplingRate float64 `intschema:"sampling_rate"`
}
