// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type Slo struct {
	Name                 string            `intschema:"name"`
	Slug                 string            `intschema:"slug,optional,computed"`
	CollectionId         tfid.ID           `intschema:"collection_id"`
	NotificationPolicyId tfid.ID           `intschema:"notification_policy_id,optional"`
	Definition           SloDefinition     `intschema:"definition,list_encoded_object"`
	Sli                  SloSli            `intschema:"sli,list_encoded_object"`
	Annotations          map[string]string `intschema:"annotations,optional"`
	Description          string            `intschema:"description,optional"`
	SignalGrouping       string            `intschema:"signal_grouping,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *Slo) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.Slo, d, o)
}

func (o *Slo) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *Slo) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_slo", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *Slo) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_slo",
		ID:   o.HCLID,
	}.AsID()
}

type SloSli struct {
	CustomIndicator       *SloSliCustomIndicator      `intschema:"custom_indicator,optional,list_encoded_object"`
	EndpointAvailability  *SloSliEndpointAvailability `intschema:"endpoint_availability,optional,list_encoded_object"`
	EndpointLabel         string                      `intschema:"endpoint_label,optional"`
	EndpointLatency       *SloSliEndpointLatency      `intschema:"endpoint_latency,optional,list_encoded_object"`
	LensTemplateIndicator string                      `intschema:"lens_template_indicator,optional"`
}

type SloSliEndpointLatency struct {
	EndpointsMonitored      []string                                       `intschema:"endpoints_monitored"`
	LatencyBucket           string                                         `intschema:"latency_bucket"`
	AdditionalPromqlFilters []SloSliEndpointLatencyAdditionalPromqlFilters `intschema:"additional_promql_filters,optional"`
}

type SloSliEndpointLatencyAdditionalPromqlFilters struct {
	LabelName string `intschema:"label_name"`
	Type      string `intschema:"type"`
	Value     string `intschema:"value"`
}

type SloSliEndpointAvailability struct {
	EndpointsMonitored      []string                                            `intschema:"endpoints_monitored"`
	AdditionalPromqlFilters []SloSliEndpointAvailabilityAdditionalPromqlFilters `intschema:"additional_promql_filters,optional"`
	ErrorCodes              []string                                            `intschema:"error_codes,optional"`
	SuccessCodes            []string                                            `intschema:"success_codes,optional"`
}

type SloSliEndpointAvailabilityAdditionalPromqlFilters struct {
	LabelName string `intschema:"label_name"`
	Type      string `intschema:"type"`
	Value     string `intschema:"value"`
}

type SloSliCustomIndicator struct {
	TotalQueryTemplate string `intschema:"total_query_template"`
	BadQueryTemplate   string `intschema:"bad_query_template,optional"`
	GoodQueryTemplate  string `intschema:"good_query_template,optional"`
}

type SloDefinition struct {
	Objective        float64                         `intschema:"objective"`
	ReportingWindows []SloDefinitionReportingWindows `intschema:"reporting_windows"`
	LowVolume        bool                            `intschema:"low_volume,optional"`
}

type SloDefinitionReportingWindows struct {
	Duration string `intschema:"duration"`
}
