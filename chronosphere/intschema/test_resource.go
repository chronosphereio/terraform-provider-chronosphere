// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type TestResource struct {
	CollectionId            tfid.ID                     `intschema:"collection_id"`
	ComputedAndNotOptional  string                      `intschema:"computed_and_not_optional,computed"`
	DashboardJson           string                      `intschema:"dashboard_json"`
	HCLFileDashboardJson    string                      `intschema:"dashboard_json,file"`
	SomeBool                bool                        `intschema:"some_bool"`
	SomeFloat               float64                     `intschema:"some_float"`
	SomeInt                 int64                       `intschema:"some_int"`
	SomeObject              TestResourceSomeObject      `intschema:"some_object,list_encoded_object"`
	SomeObjectSet           []TestResourceSomeObjectSet `intschema:"some_object_set"`
	SomeString              string                      `intschema:"some_string"`
	SomeStringList          []string                    `intschema:"some_string_list"`
	SomeStringMap           map[string]string           `intschema:"some_string_map"`
	ComputedAndOptional     string                      `intschema:"computed_and_optional,optional,computed"`
	Notifiers               []tfid.ID                   `intschema:"notifiers,optional"`
	OptionalBoolWithDefault bool                        `intschema:"optional_bool_with_default,optional,default:true"`
	OptionalObject          *TestResourceOptionalObject `intschema:"optional_object,optional,list_encoded_object"`
	OptionalStringList      []string                    `intschema:"optional_string_list,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *TestResource) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.TestResource, d, o)
}

func (o *TestResource) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *TestResource) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_test_resource", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *TestResource) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_test_resource",
		ID:   o.HCLID,
	}.AsID()
}

type TestResourceSomeObjectSet struct {
	InnerBool   bool   `intschema:"inner_bool"`
	InnerString string `intschema:"inner_string"`
}

type TestResourceSomeObject struct {
	InnerBool   bool   `intschema:"inner_bool"`
	InnerString string `intschema:"inner_string"`
}

type TestResourceOptionalObject struct {
	InnerStringList []string `intschema:"inner_string_list"`
}
