// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type LogIngestConfig struct {
	FieldNormalization *LogIngestConfigFieldNormalization `intschema:"field_normalization,optional,list_encoded_object"`
	FieldParser        []LogIngestConfigFieldParser       `intschema:"field_parser,optional"`
	PlaintextParser    []LogIngestConfigPlaintextParser   `intschema:"plaintext_parser,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *LogIngestConfig) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.LogIngestConfig, d, o)
}

func (o *LogIngestConfig) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *LogIngestConfig) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_log_ingest_config", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *LogIngestConfig) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_log_ingest_config",
		ID:   o.HCLID,
	}.AsID()
}

type LogIngestConfigPlaintextParser struct {
	Name         string     `intschema:"name"`
	KeepOriginal bool       `intschema:"keep_original,optional"`
	Mode         string     `intschema:"mode,optional"`
	Parser       *LogParser `intschema:"parser,optional,list_encoded_object"`
}

type LogIngestConfigFieldParser struct {
	Destination *LogFieldPath `intschema:"destination,optional,list_encoded_object"`
	Mode        string        `intschema:"mode,optional"`
	Parser      *LogParser    `intschema:"parser,optional,list_encoded_object"`
	Source      *LogFieldPath `intschema:"source,optional,list_encoded_object"`
}

type LogIngestConfigFieldNormalization struct {
	CustomFieldNormalization []LogIngestConfigNamedStringNormalization `intschema:"custom_field_normalization,optional"`
	Message                  *LogIngestConfigStringNormalization       `intschema:"message,optional,list_encoded_object"`
	PrimaryKey               *LogIngestConfigNamedStringNormalization  `intschema:"primary_key,optional,list_encoded_object"`
	Severity                 *LogIngestConfigStringNormalization       `intschema:"severity,optional,list_encoded_object"`
	Timestamp                *LogIngestConfigTimestampNormalization    `intschema:"timestamp,optional,list_encoded_object"`
}
