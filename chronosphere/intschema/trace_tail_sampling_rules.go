// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type TraceTailSamplingRules struct {
	DefaultSampleRate *TraceTailSamplingRulesDefaultSampleRate `intschema:"default_sample_rate,optional,list_encoded_object"`
	Rules             []TraceTailSamplingRulesRules            `intschema:"rules,optional"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *TraceTailSamplingRules) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.TraceTailSamplingRules, d, o)
}

func (o *TraceTailSamplingRules) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *TraceTailSamplingRules) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_trace_tail_sampling_rules", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *TraceTailSamplingRules) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_trace_tail_sampling_rules",
		ID:   o.HCLID,
	}.AsID()
}

type TraceTailSamplingRulesRules struct {
	Name       string                             `intschema:"name,optional"`
	SampleRate float64                            `intschema:"sample_rate"`
	Filter     *TraceTailSamplingRulesRulesFilter `intschema:"filter,optional,list_encoded_object"`
	SystemName string                             `intschema:"system_name,optional"`
}

type TraceTailSamplingRulesRulesFilter struct {
	Span  []TraceTailSamplingRulesRulesFilterSpan `intschema:"span,optional"`
	Trace *TraceTailSamplingRulesRulesFilterTrace `intschema:"trace,optional,list_encoded_object"`
}

type TraceTailSamplingRulesRulesFilterTrace struct {
	Duration *TraceTailSamplingDurationFilterSchema `intschema:"duration,optional,list_encoded_object"`
	Error    *TraceTailSamplingBoolFilterSchema     `intschema:"error,optional,list_encoded_object"`
}

type TraceTailSamplingRulesRulesFilterSpan struct {
	Duration        *TraceTailSamplingDurationFilterSchema          `intschema:"duration,optional,list_encoded_object"`
	Error           *TraceTailSamplingBoolFilterSchema              `intschema:"error,optional,list_encoded_object"`
	MatchType       string                                          `intschema:"match_type,optional"`
	Operation       *TraceTailSamplingStringFilterSchema            `intschema:"operation,optional,list_encoded_object"`
	ParentOperation *TraceTailSamplingStringFilterSchema            `intschema:"parent_operation,optional,list_encoded_object"`
	ParentService   *TraceTailSamplingStringFilterSchema            `intschema:"parent_service,optional,list_encoded_object"`
	Service         *TraceTailSamplingStringFilterSchema            `intschema:"service,optional,list_encoded_object"`
	SpanCount       *TraceTailSamplingRulesRulesFilterSpanSpanCount `intschema:"span_count,optional,list_encoded_object"`
	Tags            []TraceTailSamplingRulesRulesFilterSpanTags     `intschema:"tags,optional"`
}

type TraceTailSamplingRulesRulesFilterSpanTags struct {
	Key          string                                `intschema:"key,optional"`
	NumericValue *TraceTailSamplingNumericFilterSchema `intschema:"numeric_value,optional,list_encoded_object"`
	Value        *TraceTailSamplingStringFilterSchema  `intschema:"value,optional,list_encoded_object"`
}

type TraceTailSamplingRulesRulesFilterSpanSpanCount struct {
	Max int64 `intschema:"max,optional"`
	Min int64 `intschema:"min,optional"`
}

type TraceTailSamplingRulesDefaultSampleRate struct {
	SampleRate float64 `intschema:"sample_rate"`
	Enabled    bool    `intschema:"enabled,optional"`
}
