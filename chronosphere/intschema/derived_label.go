// Code generated by go generate; DO NOT EDIT.
package intschema

import (
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/hclmarshal"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/intschema/convertintschema"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfid"
	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/tfschema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"io"
)

var _ tfid.ID // Always use tfid for simplified import generation.

type DerivedLabel struct {
	Name                string                   `intschema:"name"`
	Slug                string                   `intschema:"slug,optional,computed"`
	LabelName           string                   `intschema:"label_name"`
	Description         string                   `intschema:"description,optional"`
	ExistingLabelPolicy string                   `intschema:"existing_label_policy,optional"`
	MetricLabel         *DerivedLabelMetricLabel `intschema:"metric_label,optional,list_encoded_object"`
	SpanTag             *DerivedLabelSpanTag     `intschema:"span_tag,optional,list_encoded_object"`

	// Internal identifier used in the .state file, i.e. ResourceData.Id().
	// Cannot be set, else ToResourceData will panic.
	StateID string `intschema:"-"`

	// HCL-level identifier used in the .tf file. FromResourceData will always
	// leave this empty, and ToResourceData will panic if set.
	HCLID string `intschema:"-"`
}

func (o *DerivedLabel) FromResourceData(d convertintschema.ResourceGetter) error {
	return convertintschema.FromResourceData(tfschema.DerivedLabel, d, o)
}

func (o *DerivedLabel) ToResourceData(d *schema.ResourceData) diag.Diagnostics {
	return convertintschema.ToResourceData(o, d)
}

func (o *DerivedLabel) MarshalHCL(w io.Writer) error {
	m := hclmarshal.New()
	b := m.AddResource("chronosphere_derived_label", o.HCLID)
	if err := hclmarshal.MarshalIntSchema(o, b); err != nil {
		return err
	}
	return m.MarshalTo(w)
}

func (o *DerivedLabel) Ref() tfid.ID {
	if o.HCLID == "" {
		panic("Ref is only valid when schema structs are used for marshalling")
	}

	return tfid.Ref{
		Type: "chronosphere_derived_label",
		ID:   o.HCLID,
	}.AsID()
}

type DerivedLabelSpanTag struct {
	NameMappings []DerivedLabelSpanTagNameMappings `intschema:"name_mappings,optional"`
}

type DerivedLabelSpanTagNameMappings struct {
	SourceTag string `intschema:"source_tag"`
}

type DerivedLabelMetricLabel struct {
	ConstructedLabel *DerivedLabelMetricLabelConstructedLabel `intschema:"constructed_label,optional,list_encoded_object"`
	MappingLabel     *DerivedLabelMetricLabelMappingLabel     `intschema:"mapping_label,optional,list_encoded_object"`
}

type DerivedLabelMetricLabelMappingLabel struct {
	NameMappings  []DerivedLabelMetricLabelMappingLabelNameMappings `intschema:"name_mappings,optional"`
	ValueMappings []ValueMappings                                   `intschema:"value_mappings,optional"`
}

type DerivedLabelMetricLabelMappingLabelNameMappings struct {
	Filters       []DerivedLabelMetricLabelMappingLabelNameMappingsFilters `intschema:"filters"`
	SourceLabel   string                                                   `intschema:"source_label"`
	ValueMappings []ValueMappings                                          `intschema:"value_mappings,optional"`
}

type DerivedLabelMetricLabelMappingLabelNameMappingsFilters struct {
	Name      string `intschema:"name"`
	ValueGlob string `intschema:"value_glob"`
}

type DerivedLabelMetricLabelConstructedLabel struct {
	ValueDefinitions []DerivedLabelMetricLabelConstructedLabelValueDefinitions `intschema:"value_definitions"`
}

type DerivedLabelMetricLabelConstructedLabelValueDefinitions struct {
	Filters []DerivedLabelMetricLabelConstructedLabelValueDefinitionsFilters `intschema:"filters"`
	Value   string                                                           `intschema:"value"`
}

type DerivedLabelMetricLabelConstructedLabelValueDefinitionsFilters struct {
	Name      string `intschema:"name"`
	ValueGlob string `intschema:"value_glob"`
}
