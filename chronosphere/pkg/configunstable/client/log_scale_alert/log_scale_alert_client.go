// Code generated by go-swagger; DO NOT EDIT.

package log_scale_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new log scale alert API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for log scale alert API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateLogScaleAlert(params *CreateLogScaleAlertParams, opts ...ClientOption) (*CreateLogScaleAlertOK, error)

	DeleteLogScaleAlert(params *DeleteLogScaleAlertParams, opts ...ClientOption) (*DeleteLogScaleAlertOK, error)

	ListLogScaleAlerts(params *ListLogScaleAlertsParams, opts ...ClientOption) (*ListLogScaleAlertsOK, error)

	ReadLogScaleAlert(params *ReadLogScaleAlertParams, opts ...ClientOption) (*ReadLogScaleAlertOK, error)

	UpdateLogScaleAlert(params *UpdateLogScaleAlertParams, opts ...ClientOption) (*UpdateLogScaleAlertOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateLogScaleAlert create log scale alert API
*/
func (a *Client) CreateLogScaleAlert(params *CreateLogScaleAlertParams, opts ...ClientOption) (*CreateLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogScaleAlert",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/log-scale-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogScaleAlert delete log scale alert API
*/
func (a *Client) DeleteLogScaleAlert(params *DeleteLogScaleAlertParams, opts ...ClientOption) (*DeleteLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogScaleAlert",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/log-scale-alerts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLogScaleAlerts list log scale alerts API
*/
func (a *Client) ListLogScaleAlerts(params *ListLogScaleAlertsParams, opts ...ClientOption) (*ListLogScaleAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogScaleAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLogScaleAlerts",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/log-scale-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLogScaleAlertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogScaleAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLogScaleAlertsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogScaleAlert read log scale alert API
*/
func (a *Client) ReadLogScaleAlert(params *ReadLogScaleAlertParams, opts ...ClientOption) (*ReadLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogScaleAlert",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/log-scale-alerts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogScaleAlert update log scale alert API
*/
func (a *Client) UpdateLogScaleAlert(params *UpdateLogScaleAlertParams, opts ...ClientOption) (*UpdateLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogScaleAlert",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/log-scale-alerts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
