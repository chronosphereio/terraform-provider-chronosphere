// Code generated by go-swagger; DO NOT EDIT.

package log_scale_action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/pkg/configunstable/models"
)

// UpdateLogScaleActionReader is a Reader for the UpdateLogScaleAction structure.
type UpdateLogScaleActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLogScaleActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLogScaleActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLogScaleActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLogScaleActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateLogScaleActionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLogScaleActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateLogScaleActionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateLogScaleActionOK creates a UpdateLogScaleActionOK with default headers values
func NewUpdateLogScaleActionOK() *UpdateLogScaleActionOK {
	return &UpdateLogScaleActionOK{}
}

/*
UpdateLogScaleActionOK describes a response with status code 200, with default header values.

A successful response containing the updated LogScaleAction.
*/
type UpdateLogScaleActionOK struct {
	Payload *models.ConfigunstableUpdateLogScaleActionResponse
}

// IsSuccess returns true when this update log scale action o k response has a 2xx status code
func (o *UpdateLogScaleActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update log scale action o k response has a 3xx status code
func (o *UpdateLogScaleActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log scale action o k response has a 4xx status code
func (o *UpdateLogScaleActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log scale action o k response has a 5xx status code
func (o *UpdateLogScaleActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update log scale action o k response a status code equal to that given
func (o *UpdateLogScaleActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update log scale action o k response
func (o *UpdateLogScaleActionOK) Code() int {
	return 200
}

func (o *UpdateLogScaleActionOK) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionOK  %+v", 200, o.Payload)
}

func (o *UpdateLogScaleActionOK) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionOK  %+v", 200, o.Payload)
}

func (o *UpdateLogScaleActionOK) GetPayload() *models.ConfigunstableUpdateLogScaleActionResponse {
	return o.Payload
}

func (o *UpdateLogScaleActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableUpdateLogScaleActionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogScaleActionBadRequest creates a UpdateLogScaleActionBadRequest with default headers values
func NewUpdateLogScaleActionBadRequest() *UpdateLogScaleActionBadRequest {
	return &UpdateLogScaleActionBadRequest{}
}

/*
UpdateLogScaleActionBadRequest describes a response with status code 400, with default header values.

Cannot update the LogScaleAction because the request is invalid.
*/
type UpdateLogScaleActionBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log scale action bad request response has a 2xx status code
func (o *UpdateLogScaleActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log scale action bad request response has a 3xx status code
func (o *UpdateLogScaleActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log scale action bad request response has a 4xx status code
func (o *UpdateLogScaleActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log scale action bad request response has a 5xx status code
func (o *UpdateLogScaleActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update log scale action bad request response a status code equal to that given
func (o *UpdateLogScaleActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update log scale action bad request response
func (o *UpdateLogScaleActionBadRequest) Code() int {
	return 400
}

func (o *UpdateLogScaleActionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogScaleActionBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogScaleActionBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogScaleActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogScaleActionNotFound creates a UpdateLogScaleActionNotFound with default headers values
func NewUpdateLogScaleActionNotFound() *UpdateLogScaleActionNotFound {
	return &UpdateLogScaleActionNotFound{}
}

/*
UpdateLogScaleActionNotFound describes a response with status code 404, with default header values.

Cannot update the LogScaleAction because the slug does not exist.
*/
type UpdateLogScaleActionNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log scale action not found response has a 2xx status code
func (o *UpdateLogScaleActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log scale action not found response has a 3xx status code
func (o *UpdateLogScaleActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log scale action not found response has a 4xx status code
func (o *UpdateLogScaleActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log scale action not found response has a 5xx status code
func (o *UpdateLogScaleActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update log scale action not found response a status code equal to that given
func (o *UpdateLogScaleActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update log scale action not found response
func (o *UpdateLogScaleActionNotFound) Code() int {
	return 404
}

func (o *UpdateLogScaleActionNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogScaleActionNotFound) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogScaleActionNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogScaleActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogScaleActionConflict creates a UpdateLogScaleActionConflict with default headers values
func NewUpdateLogScaleActionConflict() *UpdateLogScaleActionConflict {
	return &UpdateLogScaleActionConflict{}
}

/*
UpdateLogScaleActionConflict describes a response with status code 409, with default header values.

Cannot update the LogScaleAction because there is a conflict with an existing LogScaleAction.
*/
type UpdateLogScaleActionConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log scale action conflict response has a 2xx status code
func (o *UpdateLogScaleActionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log scale action conflict response has a 3xx status code
func (o *UpdateLogScaleActionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log scale action conflict response has a 4xx status code
func (o *UpdateLogScaleActionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log scale action conflict response has a 5xx status code
func (o *UpdateLogScaleActionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update log scale action conflict response a status code equal to that given
func (o *UpdateLogScaleActionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update log scale action conflict response
func (o *UpdateLogScaleActionConflict) Code() int {
	return 409
}

func (o *UpdateLogScaleActionConflict) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionConflict  %+v", 409, o.Payload)
}

func (o *UpdateLogScaleActionConflict) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionConflict  %+v", 409, o.Payload)
}

func (o *UpdateLogScaleActionConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogScaleActionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogScaleActionInternalServerError creates a UpdateLogScaleActionInternalServerError with default headers values
func NewUpdateLogScaleActionInternalServerError() *UpdateLogScaleActionInternalServerError {
	return &UpdateLogScaleActionInternalServerError{}
}

/*
UpdateLogScaleActionInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateLogScaleActionInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log scale action internal server error response has a 2xx status code
func (o *UpdateLogScaleActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log scale action internal server error response has a 3xx status code
func (o *UpdateLogScaleActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log scale action internal server error response has a 4xx status code
func (o *UpdateLogScaleActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log scale action internal server error response has a 5xx status code
func (o *UpdateLogScaleActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update log scale action internal server error response a status code equal to that given
func (o *UpdateLogScaleActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update log scale action internal server error response
func (o *UpdateLogScaleActionInternalServerError) Code() int {
	return 500
}

func (o *UpdateLogScaleActionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogScaleActionInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] updateLogScaleActionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogScaleActionInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogScaleActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogScaleActionDefault creates a UpdateLogScaleActionDefault with default headers values
func NewUpdateLogScaleActionDefault(code int) *UpdateLogScaleActionDefault {
	return &UpdateLogScaleActionDefault{
		_statusCode: code,
	}
}

/*
UpdateLogScaleActionDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateLogScaleActionDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update log scale action default response has a 2xx status code
func (o *UpdateLogScaleActionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update log scale action default response has a 3xx status code
func (o *UpdateLogScaleActionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update log scale action default response has a 4xx status code
func (o *UpdateLogScaleActionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update log scale action default response has a 5xx status code
func (o *UpdateLogScaleActionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update log scale action default response a status code equal to that given
func (o *UpdateLogScaleActionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update log scale action default response
func (o *UpdateLogScaleActionDefault) Code() int {
	return o._statusCode
}

func (o *UpdateLogScaleActionDefault) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] UpdateLogScaleAction default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogScaleActionDefault) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-scale-actions/{slug}][%d] UpdateLogScaleAction default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogScaleActionDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateLogScaleActionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateLogScaleActionBody update log scale action body
swagger:model UpdateLogScaleActionBody
*/
type UpdateLogScaleActionBody struct {

	// If true, the LogScaleAction will be created if it does not already exist, identified by slug. If false, an error will be returned if the LogScaleAction does not already exist.
	CreateIfMissing bool `json:"create_if_missing,omitempty"`

	// If true, the LogScaleAction will not be created nor updated, and no response LogScaleAction will be returned. The response will return an error if the given LogScaleAction is invalid.
	DryRun bool `json:"dry_run,omitempty"`

	// log scale action
	LogScaleAction *models.ConfigunstableLogScaleAction `json:"log_scale_action,omitempty"`
}

// Validate validates this update log scale action body
func (o *UpdateLogScaleActionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLogScaleAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateLogScaleActionBody) validateLogScaleAction(formats strfmt.Registry) error {
	if swag.IsZero(o.LogScaleAction) { // not required
		return nil
	}

	if o.LogScaleAction != nil {
		if err := o.LogScaleAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "log_scale_action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "log_scale_action")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update log scale action body based on the context it is used
func (o *UpdateLogScaleActionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLogScaleAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateLogScaleActionBody) contextValidateLogScaleAction(ctx context.Context, formats strfmt.Registry) error {

	if o.LogScaleAction != nil {
		if err := o.LogScaleAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "log_scale_action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "log_scale_action")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateLogScaleActionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateLogScaleActionBody) UnmarshalBinary(b []byte) error {
	var res UpdateLogScaleActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
