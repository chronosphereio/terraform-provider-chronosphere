// Code generated by go-swagger; DO NOT EDIT.

package dataset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dataset API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dataset API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDataset(params *CreateDatasetParams, opts ...ClientOption) (*CreateDatasetOK, error)

	DeleteDataset(params *DeleteDatasetParams, opts ...ClientOption) (*DeleteDatasetOK, error)

	ListDatasets(params *ListDatasetsParams, opts ...ClientOption) (*ListDatasetsOK, error)

	ReadDataset(params *ReadDatasetParams, opts ...ClientOption) (*ReadDatasetOK, error)

	UpdateDataset(params *UpdateDatasetParams, opts ...ClientOption) (*UpdateDatasetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDataset create dataset API
*/
func (a *Client) CreateDataset(params *CreateDatasetParams, opts ...ClientOption) (*CreateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataset",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/datasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDataset delete dataset API
*/
func (a *Client) DeleteDataset(params *DeleteDatasetParams, opts ...ClientOption) (*DeleteDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataset",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDatasets list datasets API
*/
func (a *Client) ListDatasets(params *ListDatasetsParams, opts ...ClientOption) (*ListDatasetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatasetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDatasets",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/datasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDatasetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatasetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatasetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDataset read dataset API
*/
func (a *Client) ReadDataset(params *ReadDatasetParams, opts ...ClientOption) (*ReadDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDataset",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataset update dataset API
*/
func (a *Client) UpdateDataset(params *UpdateDatasetParams, opts ...ClientOption) (*UpdateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataset",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
