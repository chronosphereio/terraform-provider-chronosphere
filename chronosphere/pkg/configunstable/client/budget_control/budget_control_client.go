// Code generated by go-swagger; DO NOT EDIT.

package budget_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new budget control API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for budget control API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBudgetControl(params *CreateBudgetControlParams, opts ...ClientOption) (*CreateBudgetControlOK, error)

	DeleteBudgetControl(params *DeleteBudgetControlParams, opts ...ClientOption) (*DeleteBudgetControlOK, error)

	ListBudgetControls(params *ListBudgetControlsParams, opts ...ClientOption) (*ListBudgetControlsOK, error)

	ReadBudgetControl(params *ReadBudgetControlParams, opts ...ClientOption) (*ReadBudgetControlOK, error)

	UpdateBudgetControl(params *UpdateBudgetControlParams, opts ...ClientOption) (*UpdateBudgetControlOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBudgetControl create budget control API
*/
func (a *Client) CreateBudgetControl(params *CreateBudgetControlParams, opts ...ClientOption) (*CreateBudgetControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBudgetControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBudgetControl",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/budget-controls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBudgetControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBudgetControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBudgetControlDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBudgetControl delete budget control API
*/
func (a *Client) DeleteBudgetControl(params *DeleteBudgetControlParams, opts ...ClientOption) (*DeleteBudgetControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBudgetControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBudgetControl",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/budget-controls/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBudgetControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBudgetControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBudgetControlDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListBudgetControls list budget controls API
*/
func (a *Client) ListBudgetControls(params *ListBudgetControlsParams, opts ...ClientOption) (*ListBudgetControlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBudgetControlsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBudgetControls",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/budget-controls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBudgetControlsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBudgetControlsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBudgetControlsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadBudgetControl read budget control API
*/
func (a *Client) ReadBudgetControl(params *ReadBudgetControlParams, opts ...ClientOption) (*ReadBudgetControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadBudgetControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadBudgetControl",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/budget-controls/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadBudgetControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadBudgetControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadBudgetControlDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateBudgetControl update budget control API
*/
func (a *Client) UpdateBudgetControl(params *UpdateBudgetControlParams, opts ...ClientOption) (*UpdateBudgetControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBudgetControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBudgetControl",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/budget-controls/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBudgetControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBudgetControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBudgetControlDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
