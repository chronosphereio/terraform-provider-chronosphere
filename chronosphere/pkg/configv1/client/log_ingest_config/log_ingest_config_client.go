// Code generated by go-swagger; DO NOT EDIT.

package log_ingest_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new log ingest config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for log ingest config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateLogIngestConfig(params *CreateLogIngestConfigParams, opts ...ClientOption) (*CreateLogIngestConfigOK, error)

	DeleteLogIngestConfig(params *DeleteLogIngestConfigParams, opts ...ClientOption) (*DeleteLogIngestConfigOK, error)

	ReadLogIngestConfig(params *ReadLogIngestConfigParams, opts ...ClientOption) (*ReadLogIngestConfigOK, error)

	UpdateLogIngestConfig(params *UpdateLogIngestConfigParams, opts ...ClientOption) (*UpdateLogIngestConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateLogIngestConfig create log ingest config API
*/
func (a *Client) CreateLogIngestConfig(params *CreateLogIngestConfigParams, opts ...ClientOption) (*CreateLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogIngestConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogIngestConfig delete log ingest config API
*/
func (a *Client) DeleteLogIngestConfig(params *DeleteLogIngestConfigParams, opts ...ClientOption) (*DeleteLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogIngestConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogIngestConfig read log ingest config API
*/
func (a *Client) ReadLogIngestConfig(params *ReadLogIngestConfigParams, opts ...ClientOption) (*ReadLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogIngestConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogIngestConfig update log ingest config API
*/
func (a *Client) UpdateLogIngestConfig(params *UpdateLogIngestConfigParams, opts ...ClientOption) (*UpdateLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogIngestConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
