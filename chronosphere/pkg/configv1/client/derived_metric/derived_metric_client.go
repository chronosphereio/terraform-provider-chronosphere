// Code generated by go-swagger; DO NOT EDIT.

package derived_metric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new derived metric API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for derived metric API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDerivedMetric(params *CreateDerivedMetricParams, opts ...ClientOption) (*CreateDerivedMetricOK, error)

	DeleteDerivedMetric(params *DeleteDerivedMetricParams, opts ...ClientOption) (*DeleteDerivedMetricOK, error)

	ListDerivedMetrics(params *ListDerivedMetricsParams, opts ...ClientOption) (*ListDerivedMetricsOK, error)

	ReadDerivedMetric(params *ReadDerivedMetricParams, opts ...ClientOption) (*ReadDerivedMetricOK, error)

	UpdateDerivedMetric(params *UpdateDerivedMetricParams, opts ...ClientOption) (*UpdateDerivedMetricOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDerivedMetric create derived metric API
*/
func (a *Client) CreateDerivedMetric(params *CreateDerivedMetricParams, opts ...ClientOption) (*CreateDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDerivedMetric",
		Method:             "POST",
		PathPattern:        "/api/v1/config/derived-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDerivedMetric delete derived metric API
*/
func (a *Client) DeleteDerivedMetric(params *DeleteDerivedMetricParams, opts ...ClientOption) (*DeleteDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDerivedMetric",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/derived-metrics/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDerivedMetrics list derived metrics API
*/
func (a *Client) ListDerivedMetrics(params *ListDerivedMetricsParams, opts ...ClientOption) (*ListDerivedMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDerivedMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDerivedMetrics",
		Method:             "GET",
		PathPattern:        "/api/v1/config/derived-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDerivedMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDerivedMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDerivedMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDerivedMetric read derived metric API
*/
func (a *Client) ReadDerivedMetric(params *ReadDerivedMetricParams, opts ...ClientOption) (*ReadDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDerivedMetric",
		Method:             "GET",
		PathPattern:        "/api/v1/config/derived-metrics/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDerivedMetric update derived metric API
*/
func (a *Client) UpdateDerivedMetric(params *UpdateDerivedMetricParams, opts ...ClientOption) (*UpdateDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDerivedMetric",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/derived-metrics/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
