// Code generated by go-swagger; DO NOT EDIT.

package mapping_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mapping rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mapping rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMappingRule(params *CreateMappingRuleParams, opts ...ClientOption) (*CreateMappingRuleOK, error)

	DeleteMappingRule(params *DeleteMappingRuleParams, opts ...ClientOption) (*DeleteMappingRuleOK, error)

	ListMappingRules(params *ListMappingRulesParams, opts ...ClientOption) (*ListMappingRulesOK, error)

	ReadMappingRule(params *ReadMappingRuleParams, opts ...ClientOption) (*ReadMappingRuleOK, error)

	UpdateMappingRule(params *UpdateMappingRuleParams, opts ...ClientOption) (*UpdateMappingRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMappingRule create mapping rule API
*/
func (a *Client) CreateMappingRule(params *CreateMappingRuleParams, opts ...ClientOption) (*CreateMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMappingRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/mapping-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMappingRule delete mapping rule API
*/
func (a *Client) DeleteMappingRule(params *DeleteMappingRuleParams, opts ...ClientOption) (*DeleteMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMappingRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/mapping-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMappingRules list mapping rules API
*/
func (a *Client) ListMappingRules(params *ListMappingRulesParams, opts ...ClientOption) (*ListMappingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMappingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMappingRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/mapping-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMappingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMappingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMappingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadMappingRule read mapping rule API
*/
func (a *Client) ReadMappingRule(params *ReadMappingRuleParams, opts ...ClientOption) (*ReadMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadMappingRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/mapping-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMappingRule update mapping rule API
*/
func (a *Client) UpdateMappingRule(params *UpdateMappingRuleParams, opts ...ClientOption) (*UpdateMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMappingRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/mapping-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
