// Code generated by go-swagger; DO NOT EDIT.

package muting_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new muting rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for muting rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMutingRule(params *CreateMutingRuleParams, opts ...ClientOption) (*CreateMutingRuleOK, error)

	DeleteMutingRule(params *DeleteMutingRuleParams, opts ...ClientOption) (*DeleteMutingRuleOK, error)

	ListMutingRules(params *ListMutingRulesParams, opts ...ClientOption) (*ListMutingRulesOK, error)

	ReadMutingRule(params *ReadMutingRuleParams, opts ...ClientOption) (*ReadMutingRuleOK, error)

	UpdateMutingRule(params *UpdateMutingRuleParams, opts ...ClientOption) (*UpdateMutingRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMutingRule create muting rule API
*/
func (a *Client) CreateMutingRule(params *CreateMutingRuleParams, opts ...ClientOption) (*CreateMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMutingRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/muting-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMutingRule delete muting rule API
*/
func (a *Client) DeleteMutingRule(params *DeleteMutingRuleParams, opts ...ClientOption) (*DeleteMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMutingRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/muting-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMutingRules list muting rules API
*/
func (a *Client) ListMutingRules(params *ListMutingRulesParams, opts ...ClientOption) (*ListMutingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMutingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMutingRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/muting-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMutingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMutingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMutingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadMutingRule read muting rule API
*/
func (a *Client) ReadMutingRule(params *ReadMutingRuleParams, opts ...ClientOption) (*ReadMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadMutingRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/muting-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMutingRule update muting rule API
*/
func (a *Client) UpdateMutingRule(params *UpdateMutingRuleParams, opts ...ClientOption) (*UpdateMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMutingRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/muting-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
