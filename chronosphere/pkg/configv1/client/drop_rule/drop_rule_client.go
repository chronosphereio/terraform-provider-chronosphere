// Code generated by go-swagger; DO NOT EDIT.

package drop_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new drop rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for drop rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDropRule(params *CreateDropRuleParams, opts ...ClientOption) (*CreateDropRuleOK, error)

	DeleteDropRule(params *DeleteDropRuleParams, opts ...ClientOption) (*DeleteDropRuleOK, error)

	ListDropRules(params *ListDropRulesParams, opts ...ClientOption) (*ListDropRulesOK, error)

	ReadDropRule(params *ReadDropRuleParams, opts ...ClientOption) (*ReadDropRuleOK, error)

	UpdateDropRule(params *UpdateDropRuleParams, opts ...ClientOption) (*UpdateDropRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDropRule create drop rule API
*/
func (a *Client) CreateDropRule(params *CreateDropRuleParams, opts ...ClientOption) (*CreateDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDropRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/drop-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDropRule delete drop rule API
*/
func (a *Client) DeleteDropRule(params *DeleteDropRuleParams, opts ...ClientOption) (*DeleteDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDropRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/drop-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDropRules list drop rules API
*/
func (a *Client) ListDropRules(params *ListDropRulesParams, opts ...ClientOption) (*ListDropRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDropRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDropRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/drop-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDropRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDropRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDropRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDropRule read drop rule API
*/
func (a *Client) ReadDropRule(params *ReadDropRuleParams, opts ...ClientOption) (*ReadDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDropRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/drop-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDropRule update drop rule API
*/
func (a *Client) UpdateDropRule(params *UpdateDropRuleParams, opts ...ClientOption) (*UpdateDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDropRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/drop-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
