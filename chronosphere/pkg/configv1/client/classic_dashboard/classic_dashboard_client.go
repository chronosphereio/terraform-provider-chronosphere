// Code generated by go-swagger; DO NOT EDIT.

package classic_dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new classic dashboard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for classic dashboard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClassicDashboard(params *CreateClassicDashboardParams, opts ...ClientOption) (*CreateClassicDashboardOK, error)

	DeleteClassicDashboard(params *DeleteClassicDashboardParams, opts ...ClientOption) (*DeleteClassicDashboardOK, error)

	ListClassicDashboards(params *ListClassicDashboardsParams, opts ...ClientOption) (*ListClassicDashboardsOK, error)

	ReadClassicDashboard(params *ReadClassicDashboardParams, opts ...ClientOption) (*ReadClassicDashboardOK, error)

	UpdateClassicDashboard(params *UpdateClassicDashboardParams, opts ...ClientOption) (*UpdateClassicDashboardOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateClassicDashboard create classic dashboard API
*/
func (a *Client) CreateClassicDashboard(params *CreateClassicDashboardParams, opts ...ClientOption) (*CreateClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateClassicDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/config/classic-dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteClassicDashboard delete classic dashboard API
*/
func (a *Client) DeleteClassicDashboard(params *DeleteClassicDashboardParams, opts ...ClientOption) (*DeleteClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClassicDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/classic-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClassicDashboards list classic dashboards API
*/
func (a *Client) ListClassicDashboards(params *ListClassicDashboardsParams, opts ...ClientOption) (*ListClassicDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClassicDashboardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListClassicDashboards",
		Method:             "GET",
		PathPattern:        "/api/v1/config/classic-dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClassicDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClassicDashboardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClassicDashboardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadClassicDashboard read classic dashboard API
*/
func (a *Client) ReadClassicDashboard(params *ReadClassicDashboardParams, opts ...ClientOption) (*ReadClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadClassicDashboard",
		Method:             "GET",
		PathPattern:        "/api/v1/config/classic-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateClassicDashboard update classic dashboard API
*/
func (a *Client) UpdateClassicDashboard(params *UpdateClassicDashboardParams, opts ...ClientOption) (*UpdateClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClassicDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/classic-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
