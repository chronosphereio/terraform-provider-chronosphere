// Code generated by go-swagger; DO NOT EDIT.

package consumption_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new consumption config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for consumption config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateConsumptionConfig(params *CreateConsumptionConfigParams, opts ...ClientOption) (*CreateConsumptionConfigOK, error)

	DeleteConsumptionConfig(params *DeleteConsumptionConfigParams, opts ...ClientOption) (*DeleteConsumptionConfigOK, error)

	ReadConsumptionConfig(params *ReadConsumptionConfigParams, opts ...ClientOption) (*ReadConsumptionConfigOK, error)

	UpdateConsumptionConfig(params *UpdateConsumptionConfigParams, opts ...ClientOption) (*UpdateConsumptionConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateConsumptionConfig create consumption config API
*/
func (a *Client) CreateConsumptionConfig(params *CreateConsumptionConfigParams, opts ...ClientOption) (*CreateConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateConsumptionConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteConsumptionConfig delete consumption config API
*/
func (a *Client) DeleteConsumptionConfig(params *DeleteConsumptionConfigParams, opts ...ClientOption) (*DeleteConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteConsumptionConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadConsumptionConfig read consumption config API
*/
func (a *Client) ReadConsumptionConfig(params *ReadConsumptionConfigParams, opts ...ClientOption) (*ReadConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadConsumptionConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateConsumptionConfig update consumption config API
*/
func (a *Client) UpdateConsumptionConfig(params *UpdateConsumptionConfigParams, opts ...ClientOption) (*UpdateConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConsumptionConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
