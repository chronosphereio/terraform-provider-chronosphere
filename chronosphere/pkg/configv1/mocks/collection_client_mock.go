// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/collection/collection_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	collection "github.com/chronosphereio/terraform-provider-chronosphere/chronosphere/pkg/configv1/client/collection"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateCollection mocks base method.
func (m *MockClientService) CreateCollection(params *collection.CreateCollectionParams, opts ...collection.ClientOption) (*collection.CreateCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollection", varargs...)
	ret0, _ := ret[0].(*collection.CreateCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockClientServiceMockRecorder) CreateCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockClientService)(nil).CreateCollection), varargs...)
}

// DeleteCollection mocks base method.
func (m *MockClientService) DeleteCollection(params *collection.DeleteCollectionParams, opts ...collection.ClientOption) (*collection.DeleteCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollection", varargs...)
	ret0, _ := ret[0].(*collection.DeleteCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClientServiceMockRecorder) DeleteCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClientService)(nil).DeleteCollection), varargs...)
}

// ListCollections mocks base method.
func (m *MockClientService) ListCollections(params *collection.ListCollectionsParams, opts ...collection.ClientOption) (*collection.ListCollectionsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollections", varargs...)
	ret0, _ := ret[0].(*collection.ListCollectionsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockClientServiceMockRecorder) ListCollections(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockClientService)(nil).ListCollections), varargs...)
}

// ReadCollection mocks base method.
func (m *MockClientService) ReadCollection(params *collection.ReadCollectionParams, opts ...collection.ClientOption) (*collection.ReadCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCollection", varargs...)
	ret0, _ := ret[0].(*collection.ReadCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCollection indicates an expected call of ReadCollection.
func (mr *MockClientServiceMockRecorder) ReadCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCollection", reflect.TypeOf((*MockClientService)(nil).ReadCollection), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}

// UpdateCollection mocks base method.
func (m *MockClientService) UpdateCollection(params *collection.UpdateCollectionParams, opts ...collection.ClientOption) (*collection.UpdateCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollection", varargs...)
	ret0, _ := ret[0].(*collection.UpdateCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollection indicates an expected call of UpdateCollection.
func (mr *MockClientServiceMockRecorder) UpdateCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockClientService)(nil).UpdateCollection), varargs...)
}
