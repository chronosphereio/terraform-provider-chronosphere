// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1LogFieldParserMode configv1 log field parser mode
//
// swagger:model configv1LogFieldParserMode
type Configv1LogFieldParserMode string

func NewConfigv1LogFieldParserMode(value Configv1LogFieldParserMode) *Configv1LogFieldParserMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1LogFieldParserMode.
func (m Configv1LogFieldParserMode) Pointer() *Configv1LogFieldParserMode {
	return &m
}

const (

	// Configv1LogFieldParserModeENABLED captures enum value "ENABLED"
	Configv1LogFieldParserModeENABLED Configv1LogFieldParserMode = "ENABLED"

	// Configv1LogFieldParserModeDISABLED captures enum value "DISABLED"
	Configv1LogFieldParserModeDISABLED Configv1LogFieldParserMode = "DISABLED"
)

// for schema
var configv1LogFieldParserModeEnum []interface{}

func init() {
	var res []Configv1LogFieldParserMode
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1LogFieldParserModeEnum = append(configv1LogFieldParserModeEnum, v)
	}
}

func (m Configv1LogFieldParserMode) validateConfigv1LogFieldParserModeEnum(path, location string, value Configv1LogFieldParserMode) error {
	if err := validate.EnumCase(path, location, value, configv1LogFieldParserModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 log field parser mode
func (m Configv1LogFieldParserMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1LogFieldParserModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 log field parser mode based on context it is used
func (m Configv1LogFieldParserMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
