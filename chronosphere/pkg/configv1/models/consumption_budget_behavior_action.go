// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConsumptionBudgetBehaviorAction consumption budget behavior action
//
// swagger:model ConsumptionBudgetBehaviorAction
type ConsumptionBudgetBehaviorAction string

func NewConsumptionBudgetBehaviorAction(value ConsumptionBudgetBehaviorAction) *ConsumptionBudgetBehaviorAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConsumptionBudgetBehaviorAction.
func (m ConsumptionBudgetBehaviorAction) Pointer() *ConsumptionBudgetBehaviorAction {
	return &m
}

const (

	// ConsumptionBudgetBehaviorActionALERTWARN captures enum value "ALERT_WARN"
	ConsumptionBudgetBehaviorActionALERTWARN ConsumptionBudgetBehaviorAction = "ALERT_WARN"

	// ConsumptionBudgetBehaviorActionALERTCRITICAL captures enum value "ALERT_CRITICAL"
	ConsumptionBudgetBehaviorActionALERTCRITICAL ConsumptionBudgetBehaviorAction = "ALERT_CRITICAL"

	// ConsumptionBudgetBehaviorActionDROP captures enum value "DROP"
	ConsumptionBudgetBehaviorActionDROP ConsumptionBudgetBehaviorAction = "DROP"
)

// for schema
var consumptionBudgetBehaviorActionEnum []interface{}

func init() {
	var res []ConsumptionBudgetBehaviorAction
	if err := json.Unmarshal([]byte(`["ALERT_WARN","ALERT_CRITICAL","DROP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consumptionBudgetBehaviorActionEnum = append(consumptionBudgetBehaviorActionEnum, v)
	}
}

func (m ConsumptionBudgetBehaviorAction) validateConsumptionBudgetBehaviorActionEnum(path, location string, value ConsumptionBudgetBehaviorAction) error {
	if err := validate.EnumCase(path, location, value, consumptionBudgetBehaviorActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this consumption budget behavior action
func (m ConsumptionBudgetBehaviorAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConsumptionBudgetBehaviorActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this consumption budget behavior action based on context it is used
func (m ConsumptionBudgetBehaviorAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
