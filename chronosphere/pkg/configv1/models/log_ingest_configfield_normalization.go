// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogIngestConfigfieldNormalization fieldNormalization allows you to map and normalize well-known fields from your logs.
// These mappings run after parsing to standardize common fields like timestamp,
// severity level, primary key name, and message across different log formats.
//
// swagger:model LogIngestConfigfieldNormalization
type LogIngestConfigfieldNormalization struct {

	// Maps additional custom fields from your logs. These will not be indexed.
	// Use these for any other fields you want to normalize, such as environment, region, or user ID.
	CustomFieldNormalization []*LogIngestConfigNamedStringNormalization `json:"custom_field_normalization"`

	// message
	Message *LogIngestConfigStringNormalization `json:"message,omitempty"`

	// primary key
	PrimaryKey *LogIngestConfigNamedStringNormalization `json:"primary_key,omitempty"`

	// severity
	Severity *LogIngestConfigStringNormalization `json:"severity,omitempty"`

	// timestamp
	Timestamp *LogIngestConfigTimestampNormalization `json:"timestamp,omitempty"`
}

// Validate validates this log ingest configfield normalization
func (m *LogIngestConfigfieldNormalization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomFieldNormalization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogIngestConfigfieldNormalization) validateCustomFieldNormalization(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomFieldNormalization) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFieldNormalization); i++ {
		if swag.IsZero(m.CustomFieldNormalization[i]) { // not required
			continue
		}

		if m.CustomFieldNormalization[i] != nil {
			if err := m.CustomFieldNormalization[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_field_normalization" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_field_normalization" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) validatePrimaryKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryKey) { // not required
		return nil
	}

	if m.PrimaryKey != nil {
		if err := m.PrimaryKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primary_key")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if m.Severity != nil {
		if err := m.Severity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("severity")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if m.Timestamp != nil {
		if err := m.Timestamp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this log ingest configfield normalization based on the context it is used
func (m *LogIngestConfigfieldNormalization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomFieldNormalization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimaryKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogIngestConfigfieldNormalization) contextValidateCustomFieldNormalization(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFieldNormalization); i++ {

		if m.CustomFieldNormalization[i] != nil {
			if err := m.CustomFieldNormalization[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_field_normalization" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_field_normalization" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.Message != nil {
		if err := m.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) contextValidatePrimaryKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PrimaryKey != nil {
		if err := m.PrimaryKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primary_key")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if m.Severity != nil {
		if err := m.Severity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("severity")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigfieldNormalization) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if m.Timestamp != nil {
		if err := m.Timestamp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogIngestConfigfieldNormalization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogIngestConfigfieldNormalization) UnmarshalBinary(b []byte) error {
	var res LogIngestConfigfieldNormalization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
